{"./":{"url":"./","title":"简介","keywords":"","body":"计算机语言 计算机语言（Computer Language）又称之为编程语言（Programming Language），本书旨在以概述形式介绍编程语言的一般特性，有助于你理解和掌握多门编程语言。 LICENSE Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"function.html":{"url":"function.html","title":"函数","keywords":"","body":"函数 可变参数 参数默认值 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"recursion.html":{"url":"recursion.html","title":"递归","keywords":"","body":"递归 死循环 已知正向数列 $a{n} = a{n-1} + 1$，求 $a{n}$ 的通项公式。是不是感觉少个条件，少什么呢？少了一个 $a{1}$ 的值。这里的 $a_{1}$ 便是退出条件，用于结束循环。 int a(unsigned int n) { if (n == 0) exit(EXIT_FAILURE); // stdlib.h if (n == 1) return 1; return a(n - 1) + 1; } Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"package.html":{"url":"package.html","title":"包、模块","keywords":"","body":"包、模块 PL Type Format C head file .h Python package 包含 __init__.py 的目录 Java jar .jar Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"goto.html":{"url":"goto.html","title":"goto","keywords":"","body":"Goto 参考 Go To Statement Considered Harmful（Edsger W. Dijkstra） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"gc.html":{"url":"gc.html","title":"垃圾回收","keywords":"","body":"垃圾回收 定义 垃圾回收（Garbage Collection，缩写：GC），是一种自动的存储器管理机制。当计算机上的动态存储器不再需要时，就应该予以释放，让出存储器。 垃圾回收器可以让程序员减轻许多负担，也减少了程序员犯错的机会。 垃圾回收起源于 LISP 语言，目前大多数语言如 JAVA、GoLang、Python 都支持垃圾回收. 特征 垃圾回收有两个基本原理： 考虑某个对象在未来的程序运行中，将不会被访问 向这些对象要求归回存储器 分类 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"gdb.html":{"url":"gdb.html","title":"GDB","keywords":"","body":"GDB: The GNU Project Debugger 参考 gdb 调试利器 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"debug.html":{"url":"debug.html","title":"调试","keywords":"","body":"调试（Debug） 概述 Name 栈（Stack） 描述 VS Code Jetbrains Vim continue 继续运行程序到下一个断点，直到程序结束 F5 step into 入栈 逐步调试代码；当调试到 调用的函数 时，进入（迈入）函数调用链 F11 F11 Smart step into 入栈 Shift + F7 Shift + F7 step out 出栈 不想调试进入的函数时，跳出（迈出）该函数调用链 ~ Shift + F11 step over 对某个 调用的函数 不感兴趣时，跳过（跨越）它 F10 breakpoint 设置断点 F9 start 启动调试器 F5 restart 重启调试器 Ctrl + Shift + F5 stop 停止调试器 Shift + F5 (Debug > Stop debugging) 断点（breakpoint） - 红色圆点 执行指针（execution pointer） - 黄色箭头 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"executable-file.html":{"url":"executable-file.html","title":"可执行文件","keywords":"","body":"可执行文件 executable code an executable file or executable program or binary（二进制文件） 常见扩展名 .exe - Dos、Windows 系列 .com - Dos、Windows 系列 .app - MacOS（以文件夹存在） .run - Linux Ubuntu 脚本 不是所有的可执行文件，都只存有计算机能阅读的数据。以 `脚本语言 撰写的脚本文件，都可以是可执行文件，而且内含的数据可被人类阅读，多数以 ASCII 文本存档。原因是：脚本语言无需经过编译器预先编译，就可经过解释器（如 Perl、Python、Shell）运行。 参考 Executable Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"compiler.html":{"url":"compiler.html","title":"编译器","keywords":"","body":"编译器/解释器 PL 编译器/解释器 c gcc scala scalac java javac python cpython 自举（Self-Hosting）/自编译 高级语言自举过程： 先用 机器语言 编写 汇编器，然后可以使用 汇编语言 编程，再用 汇编语言 编写 汇编器 先用 汇编语言 编写 C 编译器，然后可以使用 C 语言 编程，再用 C 语言 编写 C 编译器 有了 C 语言 和 C 编译器，就可以在此基础上编写高级语言的编译器、解释器或虚拟机 Yacc Yacc 参考 操作系统是 C 语言写的，那么问题来了 第一个 C 语言编译器是怎样编写的 Self-hosting 编译器的自举原理是什么？ Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"flow-control/":{"url":"flow-control/","title":"流程控制","keywords":"","body":"流程控制 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"paradigm/":{"url":"paradigm/","title":"编程范式","keywords":"","body":"编程范式（Programming Paradigm） 解释型编程语言 编译型编程语言 函数式编程语言（functional programming） 过程式编程语言 结构化语言（Structured language） 脚本编程语言 标记编程语言 基于逻辑的编程语言 并发编程语言 面向对象编程语言（object-oriented） C和C++都可以进行面向过程和面向对象的编程，不同的是C++对面向对象直接提供语言支持，而C中只能通过传统方式手动操作对象来模拟对象行为。 参考 Programming paradigm Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"paradigm/functional-programming.html":{"url":"paradigm/functional-programming.html","title":"函数式编程","keywords":"","body":"函数式编程（Functional Programming） 没有函数副作用 函数作为参数或返回值 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"paradigm/object-oriented-programming.html":{"url":"paradigm/object-oriented-programming.html","title":"面向对象编程","keywords":"","body":"面向对象编程 参考 CS-Notes 面向对象思想 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"design-pattern/":{"url":"design-pattern/","title":"设计模式","keywords":"","body":"设计模式 单例模式 工厂模式 抽象工厂模式 原型模式 （思维导图） Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"type-system/":{"url":"type-system/","title":"类型系统","keywords":"","body":"类型系统 静态类型（static type） 动态类型 强类型 弱类型 语言 类型 Java 强数据类型 Python 强数据类型 参考 Type System Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "},"test/":{"url":"test/","title":"测试","keywords":"","body":"测试 集成测试 单元测试 自动化测试 Copyright © 2019-2020 | CC BY-NC-SA 4.0 相关网站: 知识库 微架构师 快速入门            更新于 2020-03-10 "}}